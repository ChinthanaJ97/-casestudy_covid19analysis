# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WYjHmZfdKXGKnedb9OXNodKHZoM_l_J4

#1.Importing packages
"""

import numpy as np
import pandas as pd

"""#2.Gathering data

primary dataset extracted from Esri using a query URL(https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/Coronavirus_2019_nCoV_Cases/FeatureServer/1/query?where=1%3D1&outFields=*&outSR=4326&f=json)
"""

import requests # for making HTTP requests. 
# getting data 
url_request = requests.get("https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/Coronavirus_2019_nCoV_Cases/FeatureServer/1/query?where=1%3D1&outFields=*&outSR=4326&f=json")
url_json = url_request.json()
df = pd.DataFrame(url_json['features'])

df

type(df)

"""#3.data wrangling/preprocessing

1.transforming data
"""

data_list = df['attributes'].tolist() #takes the 'attributes' column from a Pandas DataFrame df and converts it into a Python list using the tolist() method.
data=pd.DataFrame(data_list)
data

data.set_index('OBJECTID')#sets the index of the Pandas DataFrame data to the 'OBJECTID' column

# to create a new Pandas DataFrame -data that contains a subset of columns from the original DataFrame, data.
data = data[['Province_State','Country_Region','Last_Update','Lat','Long_','Confirmed','Recovered','Deaths','Active']]

data

# to rename columns of dataframe
data.columns = ('State','Country','Last Update','Lat','Long','Confirmed','Recovered','Deaths','Active')
data

# fills the missing values in the 'State' column of the Pandas DataFrame data with an empty string ('') 
data['State'].fillna(value = '', inplace = True)
data

"""2.cleaning data"""

# function to convert unix timestamps(ex-1.662874e+12	) to datetime objects(EX-2022-03-14 07:22:11')

import datetime as dt

def convert_time(t):
    t = int(t)
    return dt.datetime.fromtimestamp(t)

data = data.dropna(subset = ['Last Update']) #dropping rows with missing values at "Last Update" column


data['Last Update'] = data['Last Update']/1000
data['Last Update'] = data['Last Update'].apply(convert_time)
data

round(100*(data.isnull().sum()/len(data.index)), 2)

data = data.dropna(subset = ['Lat'])
data = data.dropna(subset = ['Long'])

round(100*(data.isnull().sum()/len(data.index)), 2)

data.shape

"""#4.Exploratory Data Analysis (EDA) and Visualization

1.Top 10 confirmed cases countries visualization
"""

# sub data frame for top 10 data 
top10_confirmed = pd.DataFrame(data.groupby('Country')['Confirmed'].sum().nlargest(10).sort_values(ascending = False))
top10_confirmed

type(top10_confirmed)

import matplotlib.pyplot as plt
import plotly.express as px

fig1 = px.bar(top10_confirmed, x = top10_confirmed.index, y = 'Confirmed', 
                color = top10_confirmed.index, title = 'Top 10 Confirmed Cases Countries')
 fig1.show()

colors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red', 'tab:purple', 'tab:brown', 'tab:pink', 'tab:gray', 'tab:olive', 'tab:cyan']

# create vertical bar chart with custom colors
top10_confirmed.plot.bar(color=colors)
plt.xlabel('Country')
plt.ylabel('Confirmed Cases')
plt.title('Top 10 Countries with Highest Confirmed Cases')
plt.show()



"""2.Top 10 Death Cases Countries:"""

# sub data frame for top 10 data 
top10_deaths = pd.DataFrame(data.groupby('Country')['Deaths'].sum().nlargest(10).sort_values(ascending = False))
top10_deaths

# As a pie chart
fig2 = px.pie(top10_deaths, values='Deaths', names=top10_deaths.index, color=top10_deaths.index, title='Top 10 Death Cases Countries')
fig2.show()

# As a bar chart

colors = ['#FF5733', '#FFC300', '#DAF7A6', '#C70039', '#900C3F', '#581845', '#7D3C98', '#2ECC71', '#A569BD', '#2C3E50']

# create a bar plot with different bar colors
fig = px.bar(top10_deaths, x=top10_deaths.index, y='Deaths', title='Top 10 Death Cases Countries', color=colors)

# show the plot
fig.show()

"""3. most affected states in USA"""

# obtaining US states list with most confirmed cases - 1st method

# creating "topstates_us" Booleanmask to identify all rows with country as US in data, dataframe
topstates_us = data['Country'] == 'US'
topstates_us

#  top 5 US states with the highest number of confirmed cases from the data DataFrame
topstates_us = np.array([data[topstates_us].nlargest(5, 'Confirmed')])
topstates_us

arr = topstates_us.reshape(-1, topstates_us.shape[-1])

# create a Pandas DataFrame object
df = pd.DataFrame(arr, columns=['State', 'Country', 'Date', 'Latitude', 'Longitude', 'Confirmed', 'Deaths', 'Recovered', 'Active'])

# convert the 'Date' column to datetime format
df['Date'] = pd.to_datetime(df['Date'])

# print the resulting DataFrame
print(df)

type(df)

# obtaining US states list with most confirmed cases - 2nd method

# from previous grouped code top10_deaths
#  top10_deaths = pd.DataFrame(data.groupby('Country')['Deaths'].sum().nlargest(10).sort_values(ascending = False))

topstates_confirmed = pd.DataFrame(data[data['Country'] == 'US'].groupby('State')['Confirmed'].sum().nlargest(10).sort_values(ascending = True))
topstates_confirmed

# visualizing most affected states in USA

fig4 = px.bar(topstates_confirmed, x = 'Confirmed', y = topstates_confirmed.index, height = 500, color = 'Confirmed', orientation = 'h',
             color_continuous_scale = ['paleturquoise','green'], title = 'Top 10 US states with confirmed cases')
fig4.show()



"""4.most affected states in USA with their respective death cases"""

# defining topstates_us - a sub dataframe from main data, dataframe ,
# largest confirmed cases reporting states 

topstates_us = data['Country'] == 'US'
topstates_us = data[topstates_us].nlargest(5, 'Confirmed')
topstates_us

#visualizing most affected states in USA with their respective death cases
#  using plotly.graph_objects  library
import plotly.graph_objects as go

fig5 = go.Figure(data = [go.Bar(name = 'Confirmed Cases', x = topstates_us['Confirmed'], y = topstates_us['State'], orientation = 'h'),
    go.Bar(name = 'Death Cases', x = topstates_us['Deaths'], y = topstates_us['State'], orientation = 'h')
])
fig5.update_layout(title = 'Most Affected States in USA', height = 300)
fig5.show()



"""5. Time series analysis"""

time_series = pd.read_csv('/content/WHOcoviddata.csv')
time_series

round(100*(time_series.isnull().sum()/len(time_series.index)), 2)

# preprocessing data- dropping country code missing value rows
time_series = time_series.dropna(subset = ['Country_code'])
round(100*(time_series.isnull().sum()/len(time_series.index)), 2)



# convert date column strings to datetime format
time_series['Date_reported'] = pd.to_datetime(time_series['Date_reported'])

"""5.1. cumulative cases worldwide"""

# group by date and sum up cases
cases = time_series.groupby('Date_reported')['Cumulative_cases'].sum()
cases=pd.DataFrame(cases) #convert to pandas dataframe
cases

# visualizing - line chart for
fig = px.line(cases, x=cases.index, y='Cumulative_cases', title='Worldwide Cumulative COVID-19 Cases')
fig.show()

# graph with go.scatter() object- to fill covered area

# convert date column to datetime format
time_series['Date_reported'] = pd.to_datetime(time_series['Date_reported'])

# group by date and sum up cases
cases = time_series.groupby('Date_reported')['Cumulative_cases'].sum()

# create a line chart with fill color
fig = go.Figure()
fig.add_trace(go.Scatter(x=cases.index, y=cases.values, fill='tozeroy', name='Worldwide Cumulative COVID-19 Cases'))
fig.update_layout(title='Worldwide Cumulative COVID-19 Cases')
fig.show()



